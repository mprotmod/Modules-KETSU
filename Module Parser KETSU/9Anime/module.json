{
    "moduleInfo": {
        "moduleName": "9Anime",
        "moduleInitials": "NA",
        "moduleDesc": "Module for 9Anime website, Verification everytime you open info page. Not the best module experience.",
        "developer": "jack_",
        "moduleID": "CC3Gg83tsjm",
        "moduleImage": "https://s2.bunnycdn.ru/assets/9anime/favicons/favicon.png?v1",
        "moduleVersion": 1.6,
        "moduleLenguage": "ENG",
        "moduleType": "Video",
        "baseURL": "https://9anime.to/",
        "moduleDeveloperSite": "https://mprotmod.github.io/Modules-KETSU/index.html",
        "UpdateSite": "https://raw.githubusercontent.com/mprotmod/Modules-KETSU/main/Module%20Parser%20KETSU/9Anime/module.json",
        "preferedServer": "VIDSTREAM",
        "preferedDownloadServer": "VIDSTREAM",
        "blackListed": [
            ""
        ]
    },
    "global": {
        "variables": [
            {
                "key": "",
                "value": ""
            }
        ],
        "cookies": [
            {
                "key": "",
                "value": ""
            }
        ],
        "headers": [
            {
                "key": "",
                "value": ""
            }
        ]
    },
    "mainPage": [
        {
            "request": {
                "url": "https://9anime.to/home",
                "method": "get",
                "headers": [
                    {
                        "key": "Referer",
                        "value": "https://9anime.to"
                    }
                ],
                "httpBody": null
            },
            "extra": {
                "commands": [
                    {
                        "commandName": "",
                        "params": [
                            {
                                "key": "",
                                "value": ""
                            }
                        ]
                    }
                ],
                "extraInfo": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": "const DefaultLayouts = { ultraWideFull: 'ultraWideFull', ultraWide: 'ultraWide', wideFull: 'wideFull', wide: 'wide', wideStrechedFull: 'wideStrechedFull', wideStrechedFullDouble: 'WideStrechedFullDouble', wideStreched: 'wideStreched', wideStrechedDouble: 'wideStrechedDouble', wideStrechedFullList: 'wideStrechedFullList', wideStrechedList: 'wideStrechedList', doublets: 'doublets', doubletsDouble: 'doubletsDouble', doubletsFull: 'doubletsFull', doubletsFullDouble: 'doubletsFullDouble', doubletsConstant: 'doubletsConstant', doubletsDoubleConstant: 'doubletsDoubleConstant', doubletsFullConstant: 'doubletsFullConstant', doubletsFullDoubleConstant: 'doubletsFullDoubleConstant', longDoublets: 'longDoublets', longDoubletsDouble: 'longDoubletsDouble', longDoubletsFull: 'longDoubletsFull', longDoubletsFullDouble: 'longDoubletsFullDouble', longDoubletsConstant: 'longDoubletsConstant', longDoubletsDoubleConstant: 'longDoubletsDoubleConstant', longDoubletsFullConstant: 'longDoubletsFullConstant', longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant', triplets: 'triplets', tripletsDouble: 'tripletsDouble', tripletsFull: 'tripletsFull', tripletsFullDouble: 'tripletsFullDouble', tripletsConstant: 'tripletsConstant', tripletsDoubleConstant: 'tripletsDoubleConstant', tripletsFullConstant: 'tripletsFullConstant', tripletsFullDoubleConstant: 'tripletsFullDoubleConstant', longTriplets: 'longTriplets', longTripletsDouble: 'longTripletsDouble', longTripletsFull: 'longTripletsFull', longTripletsFullDouble: 'longTripletsFullDouble', longTripletsConstant: 'longTripletsConstant', longTripletsDoubleConstant: 'longTripletsDoubleConstant', longTripletsFullConstant: 'longTripletsFullConstant', longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant', none: ''};const CellDesings = { Special1: 'Special1', Special2: 'Special2', Special3: 'Special3', CELLHelperText: 'CELLHelperText', small1: 'small1', small2: 'small2', normal1: 'normal1', normal2: 'normal2', normal3: 'normal3', normal4: 'normal4', normal5: 'normal5', normal6: 'normal6', normal7: 'normal7', wide1: 'wide1', wide2: 'wide2', wide3: 'wide3', wide4: 'wide4', wide5: 'wide5', wide6: 'wide6', wide7: 'wide7', wide8: 'wide8', wide9: 'wide9', wide10: 'wide10', wide11: 'wide11'};const Paging = { leading: 'leading', centered: 'centered', none: ''};const Orientation = { horizontal: 'horizontal', vertical: 'vertical'};function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator;}function Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing;}function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right;}function Size(width, height) { this.width = width; this.height = height;}function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2;}function Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;}function quickData(link, image, title, field1) { return new Data(image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link);}function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a;}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);let output = [];let featured = [];let topAnime = [];let recent = [];let emptyKeyValue = [new KeyValue('', '')];const slides = document.querySelectorAll('.swiper-wrapper > .swiper-slide.item');for (const slide of slides) { let image = slide.querySelector('.backdrop').style.backgroundImage; image = image.match(/\"(.+?)\"/)[1]; image = new ModuleRequest(image, 'get', emptyKeyValue, null); const title = slide.querySelector('.info > h2 > a').textContent; let link = slide.querySelector('.info > h2 > a').href; link = new URL(link, parsedJson.request.url).href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); const desc = slide.querySelector('.info > p').textContent; const obj = new Data(image, title, 'unknown', title, desc, 'unknown', 'unknown', false, link, false); featured.push(obj);}const tops = document.querySelectorAll('.top > .body > ul[data-name=day] > li');for (const top of tops) { let image = ''; if (top.className.includes('top1')) { image = top.style.backgroundImage.match(/\"(.+?)\"/)[1]; image = image.includes('.jpg-') ? image.split('-w')[0] : image; } else { image = top.querySelector('a > .anime > .thumb > div > img').src; } image = new ModuleRequest(image, 'get', emptyKeyValue, null); let link = top.querySelector('a').href; link = new URL(link, parsedJson.request.url).href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); const title = top.querySelector('a > .anime > .info > .name').textContent; const obj = new Data(image, title, 'unknown', 'unknown', 'unknown', 'unknown', 'unknown', false, link, false); topAnime.push(obj);}const animeList = document.querySelectorAll('.anime-list > li');for (const anime of animeList) { const title = anime.querySelector('.name').textContent; let link = anime.querySelector('.name').href; link = new URL(link, parsedJson.request.url).href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); let image = anime.querySelector('.poster > img').src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); const obj = new Data(image, title, 'unknown', 'unknown', 'unknown', 'unknown', 'unknown', false, link, false); recent.push(obj);}var topLayout = new Layout(new Insets(0, 0, 0, 0), 1, 2, 3, 1, 500, new Size(400, 400), new Ratio('width', 1, 1), new Size(0, 0), 0, 0);output.push(new Output(CellDesings.Special3, Orientation.horizontal, DefaultLayouts.none, Paging.centered, new Section('', false), topLayout, featured));output.push(new Output(CellDesings.Special1, Orientation.horizontal, DefaultLayouts.triplets, Paging.leading, new Section('Top Anime', true), null, topAnime));output.push(new Output(CellDesings.normal4, Orientation.vertical, DefaultLayouts.longTripletsFull, Paging.none, new Section('Recently Updated', true), null, recent));let MainPageObject = new MainPage(new ModuleRequest('', 'get', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(true, false, ''), output);var finalJson = JSON.stringify(MainPageObject);savedData.innerHTML = finalJson;"
            },
            "output": [
                {
                    "cellDesing": "normal1",
                    "orientation": "vertical",
                    "defaultLayout": "wide",
                    "paging": "",
                    "section": {
                        "sectionName": "",
                        "separator": false
                    },
                    "layout": {
                        "insets": {
                            "top": 0,
                            "bottom": 0,
                            "left": 0,
                            "right": 0
                        },
                        "visibleCellsWidthS": 2,
                        "visibleCellsWidthM": 2,
                        "visibleCellsWidthL": 2,
                        "visibleCellsHeight": 2,
                        "heightForVisibleCells": 400,
                        "cellSize": {
                            "width": 300,
                            "height": 300
                        },
                        "ratio": {
                            "inRelation": "width",
                            "number1": 1,
                            "number2": 2
                        },
                        "constant": {
                            "width": 1,
                            "height": 2
                        },
                        "horizontalSpacing": 0,
                        "verticalSpacing": 0
                    },
                    "data": [
                        {
                            "image": {
                                "url": "",
                                "method": "get",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "httpBody": null
                            },
                            "title": "",
                            "description": "",
                            "field1": "",
                            "field2": "",
                            "field3": "",
                            "field4": "",
                            "openInWebView": false,
                            "isChapter": false,
                            "link": {
                                "url": "",
                                "method": "",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "httpBody": null
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "search": [
        {
            "request": {
                "url": "https://9anime.to/home?keyword=<searched>&page=<page>",
                "method": "get",
                "headers": [
                    {
                        "key": "Referer",
                        "value": "https://9anime.to/home"
                    }
                ],
                "httpBody": null
            },
            "separator": "+",
            "extra": {
                "commands": [
                    {
                        "commandName": "",
                        "params": [
                            {
                                "key": "",
                                "value": ""
                            }
                        ]
                    }
                ],
                "extraInfo": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": "const DefaultLayouts = { ultraWideFull: 'ultraWideFull', ultraWide: 'ultraWide', wideFull: 'wideFull', wide: 'wide', wideStrechedFull: 'wideStrechedFull', wideStrechedFullDouble: 'WideStrechedFullDouble', wideStreched: 'wideStreched', wideStrechedDouble: 'wideStrechedDouble', wideStrechedFullList: 'wideStrechedFullList', wideStrechedList: 'wideStrechedList', doublets: 'doublets', doubletsDouble: 'doubletsDouble', doubletsFull: 'doubletsFull', doubletsFullDouble: 'doubletsFullDouble', doubletsConstant: 'doubletsConstant', doubletsDoubleConstant: 'doubletsDoubleConstant', doubletsFullConstant: 'doubletsFullConstant', doubletsFullDoubleConstant: 'doubletsFullDoubleConstant', longDoublets: 'longDoublets', longDoubletsDouble: 'longDoubletsDouble', longDoubletsFull: 'longDoubletsFull', longDoubletsFullDouble: 'longDoubletsFullDouble', longDoubletsConstant: 'longDoubletsConstant', longDoubletsDoubleConstant: 'longDoubletsDoubleConstant', longDoubletsFullConstant: 'longDoubletsFullConstant', longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant', triplets: 'triplets', tripletsDouble: 'tripletsDouble', tripletsFull: 'tripletsFull', tripletsFullDouble: 'tripletsFullDouble', tripletsConstant: 'tripletsConstant', tripletsDoubleConstant: 'tripletsDoubleConstant', tripletsFullConstant: 'tripletsFullConstant', tripletsFullDoubleConstant: 'tripletsFullDoubleConstant', longTriplets: 'longTriplets', longTripletsDouble: 'longTripletsDouble', longTripletsFull: 'longTripletsFull', longTripletsFullDouble: 'longTripletsFullDouble', longTripletsConstant: 'longTripletsConstant', longTripletsDoubleConstant: 'longTripletsDoubleConstant', longTripletsFullConstant: 'longTripletsFullConstant', longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant', none: ''};const CellDesings = { Special1: 'Special1', Special2: 'Special2', Special3: 'Special3', CELLHelperText: 'CELLHelperText', small1: 'small1', small2: 'small2', normal1: 'normal1', normal2: 'normal2', normal3: 'normal3', normal4: 'normal4', normal5: 'normal5', normal6: 'normal6', normal7: 'normal7', wide1: 'wide1', wide2: 'wide2', wide3: 'wide3', wide4: 'wide4', wide5: 'wide5', wide6: 'wide6', wide7: 'wide7', wide8: 'wide8', wide9: 'wide9', wide10: 'wide10', wide11: 'wide11'};const Paging = { leading: 'leading', centered: 'centered', none: ''};const Orientation = { horizontal: 'horizontal', vertical: 'vertical'};function Search(request, extra, separator, javascriptConfig, output) { this.request = request; this.extra = extra; this.separator = separator; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator;}function Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing;}function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right;}function Size(width, height) { this.width = width; this.height = height;}function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2;}function Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;}function quickData(link, image, title, field1) { return new Data(image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link);}function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a;}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);let output = [];let results = [];let emptyKeyValue = [new KeyValue('', '')];let newRequest = new ModuleRequest('', '', emptyKeyValue, null);let urlRequest = parsedJson.request.url.replace('amp;', '');if (!urlRequest.includes('verified=')) { function b(c,d){const e=a();return b=function(f,g){f=f-0x17b;let h=e[f];return h;},b(c,d);}function a(){const B=['6tCqVBE','undefined','charCodeAt','fromCharCode','4547290DSyZwj','1610030vrNEuQ','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/','12kvXduw','length','keys','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789','127938dVjCWE','41880267YQXxyJ','36eIYtjD','5984728rjbiiv','3887644widBDk','1810776ceyzYY','7UMOtiQ'];a=function(){return B;};return a();}(function(c,d){const z=b,e=c();while(!![]){try{const f=-parseInt(z(0x186))/0x1+-parseInt(z(0x188))/0x2*(parseInt(z(0x181))/0x3)+parseInt(z(0x185))/0x4+-parseInt(z(0x18c))/0x5*(parseInt(z(0x17d))/0x6)+parseInt(z(0x187))/0x7*(-parseInt(z(0x184))/0x8)+parseInt(z(0x183))/0x9*(parseInt(z(0x17b))/0xa)+parseInt(z(0x182))/0xb;if(f===d)break;else e['push'](e['shift']());}catch(g){e['push'](e['shift']());}}}(a,0xdfffb));function enc(c){const A=b;let f='',g='',j=A(0x180);for(let q=0x0;q<0x10;q++)g+=j['charAt'](Math['floor'](Math['random']()*j[A(0x17e)]));let k=[...Array(0x100)[A(0x17f)]()],l=0x0;for(let s=0x0;s<0x100;s++)k[l=(l+k[s]+g['charCodeAt'](s%g[A(0x17e)]))%0x100]=[k[s],k[s]=k[l]][0x0];for(var m='',o=l=index=0x0;o<c[A(0x17e)];o+=0x1)k[l=(l+k[index=(index+o)%0x100])%0x100]=[k[index],k[index]=k[l]][0x0],m+=String[A(0x18b)](c[A(0x18a)](o)^k[(k[index]+k[l])%0x100]);for(let v=0x0;v<m[A(0x17e)];v++)if(g[A(0x18a)](v)>0xff)return null;for(u=0x0;u<m[A(0x17e)];u+=0x3){let w=[void 0x0,void 0x0,void 0x0,void 0x0];w[0x0]=m[A(0x18a)](u)>>0x2,w[0x1]=(0x3&m[A(0x18a)](u))<<0x4;if(m[A(0x17e)]>u+0x1)w[0x1]|=m[A(0x18a)](u+0x1)>>0x4;w[0x2]=isNaN(m[A(0x18a)](u+0x1))?undefined:(0xf&m['charCodeAt'](u+0x1))<<0x2;if(m['length']>u+0x2)w[0x2]|=m[A(0x18a)](u+0x2)>>0x6;w[0x3]=isNaN(m[A(0x18a)](u+0x2))?undefined:0x3f&m[A(0x18a)](u+0x2);for(let y=0x0;y<w[A(0x17e)];y++){typeof w[y]==A(0x189)?f+='=':f+=0x0<=w[y]&&w[y]<0x40?A(0x17c)[w[y]]:'';}}return g+f;} let keyword = new URL(urlRequest).searchParams.get('keyword'); let page = new URL(urlRequest).searchParams.get('page'); let origin = new URL(urlRequest).origin; let keywordEnc = encodeURIComponent(enc(keyword)); newRequest = new ModuleRequest(`${origin}/search?keyword=${keyword.replace(/\\s/g, '+')}&verified=${keywordEnc}&page=${page}`, 'get', emptyKeyValue, null);} else { const animeList = document.querySelectorAll('.anime-list > li'); for (const anime of animeList) { const title = anime.querySelector('.name').textContent.trim(); let link = anime.querySelector('.name').href; link = new URL(link, parsedJson.request.url).href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); let image = anime.querySelector('.poster > img').src; image = new ModuleRequest(image, 'get', emptyKeyValue, null); const tag = anime.querySelector('.poster > .tag').textContent.trim(); const tags = Array.from(anime.querySelectorAll('.poster > .taglist > span')).map(t => t.className.toUpperCase()); const language = tags.includes('DUB') ? 'DUB' : 'SUB'; let type = 'TV'; for (const stag of tags) { switch (stag) { case 'MOVIE': case 'SPECIAL': case 'OVA': case 'ONA': type = stag; break; default: break; } } const obj = new Data(image, title, tag, language, type, 'unknown', 'unknown', false, link, false); results.push(obj); } let horizontalLayout = new Layout(new Insets(10, 10, 10, 10), 1, 2, 3, 1, 500, new Size(400, 400), new Ratio('width', 4, 11), new Size(0, 0), 10, 10); output.push(new Output(CellDesings.wide11, Orientation.vertical, DefaultLayouts.none, Paging.none, new Section('', false), horizontalLayout, results));}let searchPageObject = new Search(newRequest, new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), '', new JavascriptConfig(true, false, ''), output);var finalJson = JSON.stringify(searchPageObject);savedData.innerHTML = finalJson;"
            },
            "output": [
                {
                    "cellDesing": "normal1",
                    "orientation": "vertical",
                    "defaultLayout": "wide",
                    "paging": "",
                    "section": {
                        "sectionName": "",
                        "separator": false
                    },
                    "layout": {
                        "insets": {
                            "top": 0,
                            "bottom": 0,
                            "left": 0,
                            "right": 0
                        },
                        "visibleCellsWidthS": 2,
                        "visibleCellsWidthM": 2,
                        "visibleCellsWidthL": 2,
                        "visibleCellsHeight": 2,
                        "heightForVisibleCells": 400,
                        "cellSize": {
                            "width": 300,
                            "height": 300
                        },
                        "ratio": {
                            "inRelation": "width",
                            "number1": 1,
                            "number2": 2
                        },
                        "constant": {
                            "width": 1,
                            "height": 2
                        },
                        "horizontalSpacing": 0,
                        "verticalSpacing": 0
                    },
                    "data": [
                        {
                            "image": {
                                "url": "",
                                "method": "get",
                                "headers": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ],
                                "httpBody": null
                            },
                            "title": "",
                            "description": "",
                            "field1": "",
                            "field2": "",
                            "field3": "",
                            "field4": "",
                            "openInWebView": false,
                            "isChapter": false,
                            "link": {
                                "url": "empty",
                                "method": "get",
                                "headers": [
                                    {
                                        "key": "key",
                                        "value": "value"
                                    }
                                ],
                                "httpBody": null
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "info": [
        {
            "request": {
                "url": "",
                "method": "get",
                "headers": [
                    {
                        "key": "Referer",
                        "value": "https://9anime.to/home"
                    }
                ],
                "httpBody": null
            },
            "extra": {
                "commands": [
                    {
                        "commandName": "",
                        "params": [
                            {
                                "key": "",
                                "value": ""
                            }
                        ]
                    }
                ],
                "extraInfo": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": "function Info(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Chapter(chapName, link, openInWebView) { this.chapName = chapName; this.link = link; this.openInWebView = openInWebView;}function Output(image, title, link, description, genres, field1, field2, field3, field4, chapters) { this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.chapters = chapters;}function getStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return data.replace(match, '').trim(); } }}function getHtmlStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return array[x]; } }}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerText);let emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)];let commands = [new Commands('', emptyKeyValue)];let newRequest = new ModuleRequest('', '', emptyKeyValue, null);let dict = { current: '', data: ''};for (const data of parsedJson.global.variables) { dict[data.key] = data.value;}const info = document.querySelector('.info');const metaArr = info.querySelectorAll('.meta > div > div');let meta = {};for (const m of metaArr) { let re = m.textContent.split(':'); const key = re[0].trim().replace(' ', '-').toLowerCase(); const value = re[1].trim(); meta[key] = value;}var episodes = [];var type = meta.type ? meta.type : 'TV';var status = meta.status ? meta.status : 'On Going';var genres = meta.genre ? meta.genre.split(', ') : [];var desc = '';var title = info.querySelector('h1.title').textContent.trim();var image = document.querySelector('#info > .thumb > div > img').src;image = new ModuleRequest(image, 'get', emptyKeyValue, null);try { desc = info.querySelector('p[itemprop=description]').textContent;} catch {}try { if (desc.length == 0) { desc = info.querySelector('p[itemprop=depion]').textContent; }} catch {}desc = desc.replace(/\"/g, '');if (dict['current'] != parsedJson.request.url) { newRequest = new ModuleRequest(parsedJson.request.url, 'get', emptyKeyValue, null); commands = [new Commands('helperFunction', [new KeyValue('isCustomRequest', 'true'), new KeyValue('name', 'example')])];} else { commands = [new Commands('variable', [new KeyValue('current', '')])]; let newEpisodes = decodeURIComponent(dict['data']); let htmlObject = document.createElement('div'); htmlObject.innerHTML = newEpisodes; const eps = htmlObject.querySelectorAll('.episodes > li > a'); for (const ep of eps) { let title = ep.textContent.trim(); title = title.includes('Full') ? title : `Episode ${title}`; let sources = JSON.parse(ep.dataset.sources); let link = 'https://google.com/?'; for (const key in sources) { link += link.length == 20 ? `${key}=${sources[key]}` : `&${key}=${sources[key]}`; } const obj = new Chapter(title, new ModuleRequest(link, 'get', emptyKeyValue, null), false); episodes.push(obj); }}let infoPageObject = new Info(newRequest, new Extra(commands, emptyKeyValue), new JavascriptConfig(false, false, ''), new Output(image, title, parsedJson.request, desc, genres, status, 'Anime', type, 'Eps: ' + episodes.length, episodes));var finalJson = JSON.stringify(infoPageObject);savedData.innerHTML = finalJson;"
            },
            "output": {
                "image": {
                    "url": "",
                    "method": "get",
                    "headers": [
                        {
                            "key": "",
                            "value": ""
                        }
                    ],
                    "httpBody": null
                },
                "link": {
                    "url": "",
                    "method": "get",
                    "headers": [
                        {
                            "key": "",
                            "value": ""
                        }
                    ],
                    "httpBody": null
                },
                "title": "",
                "description": "",
                "genres": [
                    ""
                ],
                "field1": "",
                "field2": "",
                "field3": "",
                "field4": "",
                "chapters": [
                    {
                        "chapName": "",
                        "openInWebView": false,
                        "link": {
                            "url": "empty",
                            "method": "get",
                            "headers": [
                                {
                                    "key": "key",
                                    "value": "value"
                                }
                            ],
                            "httpBody": null
                        }
                    }
                ]
            }
        }
    ],
    "chapters": [
        {
            "request": {
                "url": "",
                "method": "get",
                "headers": [
                    {
                        "key": "key",
                        "value": "value"
                    }
                ],
                "httpBody": null
            },
            "extra": {
                "commands": [
                    {
                        "commandName": "",
                        "params": [
                            {
                                "key": "",
                                "value": ""
                            }
                        ]
                    }
                ],
                "extraInfo": [
                    {
                        "key": "",
                        "value": ""
                    }
                ]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": "function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(videos, images, text) { this.videos = videos; this.images = images; this.text = text;}function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo;}function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link;}function RawVideo(video) { this.video = video;}function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function Text(text) { this.text = text;}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var output = parsedJson.output.videos;var emptyKeyValue = [new KeyValue('', '')];var referer = [new KeyValue('referer', 'https://9anime.to/watch/')];let newRequest = new ModuleRequest('', '', emptyKeyValue, null);let extraInfo = [new KeyValue('current', '1')];const url = new URL(parsedJson.request.url);const params = url.search.substring(1).split('&amp;');let serv = {};for (const extras of parsedJson.extra.extraInfo) { serv[extras.key] = extras.value;}if (url.href.includes('google')) { let servers = {}; for (const param of params) { let p = param.split('='); let key = p[0]; servers[key] = p[1]; } extraInfo.push(new KeyValue('Streamtape', servers['40'])); extraInfo.push(new KeyValue('Vidstream', servers['41'])); newRequest = new ModuleRequest(`https://9anime.to/ajax/anime/episode?id=${servers['35']}`, 'get', referer, null);} else { function transform(r) { const e = r.substr(0, 16); let t = r.substr(16); if ((t = t.replace(/[ \\t\\n\\f\\r]/g, '')).length % 4 == 0 && ((t = t.replace(/==?$/, '')).length % 4 == 1 || /[^+/0-9A-Za-z]/.test(t))) return null; let n = '', o = 0; for (let r = 0; r < t.length; r++) { o <<= 6; const e = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.indexOf(t[r]); if (((o |= e < 0 ? void 0 : e), (r + 1) % 4 == 0 && ((n += String.fromCharCode((16711680 & o) >> 16)), (n += String.fromCharCode((65280 & o) >> 8)), (n += String.fromCharCode(255 & o)), (o = remaining = 0)), r == t.length - 1)) switch (r % 4) { case 1: (o >>= 4), (n += String.fromCharCode(o)); break; case 2: (o >>= 2), (n += String.fromCharCode((65280 & o) >> 8)), (n += String.fromCharCode(255 & o)); } } try { n = decodeURIComponent(n); } catch (r) {} var a = [...Array(256).keys()], i = 0; for (let r = 0; r < 256; r += 1) a[(i = (i + a[r] + e.charCodeAt(r % e.length)) % 256)] = [a[r], (a[r] = a[i])][0]; for (var d = '', h = (i = index = 0); h < n.length; h += 1) (a[(i = (i + a[(index = (index + h) % 256)]) % 256)] = [a[index], (a[index] = a[i])][0]), (d += String.fromCharCode(n.charCodeAt(h) ^ a[(a[index] + a[i]) % 256])); return d;} const current = parseInt(serv.current); const script = document.querySelector('script').innerHTML.replace('/*', '').replace('*/', ''); const data = JSON.parse(script); const videoUrl = transform(data.url); let name = 'MP4UPLOAD'; if (current == 1) { extraInfo = []; output.needsResolver = []; extraInfo.push(new KeyValue('current', '2')); extraInfo.push(new KeyValue('Vidstream', serv['Vidstream'])); newRequest = new ModuleRequest(`https://9anime.to/ajax/anime/episode?id=${serv['Streamtape']}`, 'get', referer, null); } else if (current == 2) { name = 'STREAMTAPE'; extraInfo = []; extraInfo.push(new KeyValue('current', '3')); newRequest = new ModuleRequest(`https://9anime.to/ajax/anime/episode?id=${serv['Vidstream']}`, 'get', referer, null); } else { name = 'VIDSTREAM'; } let resolver = new NeedsResolver(name, new ModuleRequest(videoUrl, 'get', referer, null)); output.needsResolver.push(resolver); output.rawVideo = null;}const extra = new Extra([new Commands('', emptyKeyValue)], extraInfo);var chaptersObject = new Chapters(newRequest, extra, new JavascriptConfig(true, false, ''), new Output(output, null, null));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
            },
            "output": {
                "videos": {
                    "needsResolver": [
                        {
                            "resolverIdentifier": "",
                            "link": {
                                "url": "",
                                "method": "get",
                                "headers": [
                                    {
                                        "key": "key",
                                        "value": "value"
                                    }
                                ],
                                "httpBody": null
                            }
                        }
                    ],
                    "rawVideo": [
                        {
                            "video": [
                                {
                                    "videoQuality": "",
                                    "videoLink": {
                                        "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                                        "method": "get",
                                        "headers": [
                                            {
                                                "key": "key",
                                                "value": "value"
                                            }
                                        ],
                                        "httpBody": null
                                    }
                                }
                            ]
                        }
                    ]
                },
                "images": [
                    {
                        "url": "empty",
                        "method": "get",
                        "headers": [
                            {
                                "key": "key",
                                "value": "value"
                            }
                        ],
                        "httpBody": null
                    }
                ],
                "text": {
                    "text": ""
                }
            }
        }
    ],
    "moduleResolvers": [
        {
            "resolverInfo": {
                "resolverName": "VIDSTREAM",
                "nameMatches": [
                    "VIDSTREAM"
                ],
                "developer": "Jack_",
                "moduleID": "q3RuUt2jwX9",
                "resolverVersion": 1,
                "baseURL": ""
            },
            "resolver": [
                {
                    "request": {
                        "url": "",
                        "method": "get",
                        "headers": [
                            {
                                "key": "key",
                                "value": "value"
                            }
                        ],
                        "httpBody": null
                    },
                    "extra": {
                        "commands": [
                            {
                                "commandName": "",
                                "params": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ]
                            }
                        ],
                        "extraInfo": [
                            {
                                "key": "",
                                "value": ""
                            }
                        ]
                    },
                    "javascriptConfig": {
                        "removeJavascript": true,
                        "loadInWebView": false,
                        "javaScript": "function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(video) { this.video = video;}function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function getNext(match, array) { for (var x = 0; x < array.length; x++) { let mMatch = array[x]; if (mMatch.includes(match)) { return array[x + 1]; } }}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);let url = parsedJson.request.url;var emptyKeyValue = [ new KeyValue('Referer', url), new KeyValue('x-requested-with', 'XMLHttpRequest')];var videos = [];let request = new ModuleRequest('', '', emptyKeyValue, null);if (url.includes('/embed/')) { let videoID = url.split('/embed/')[1]; let match = document.querySelector('body').innerHTML.match(/skey\\s?=\\s?'([^']+)/); if (match) { const skey = match[1]; request = new ModuleRequest(`https://vidstreamz.online/info/${videoID}?skey=${skey}`, 'get', emptyKeyValue, null); }} else { const script = document.querySelector('script').innerHTML.replace('/*', '').replace('*/', ''); const data = JSON.parse(script); videos.push(new Video('Normal', new ModuleRequest(data.media.sources[0].file, 'get', emptyKeyValue, null)));}var chaptersObject = new Resolver(request, new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(false, false, ''), new Output(videos));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
                    },
                    "output": {
                        "moduleID": "",
                        "video": [
                            {
                                "videoQuality": "720",
                                "videoLink": {
                                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                                    "method": "get",
                                    "headers": [
                                        {
                                            "key": "key",
                                            "value": "value"
                                        }
                                    ],
                                    "httpBody": null
                                }
                            }
                        ]
                    }
                }
            ]
        }
    ], 
    "responseCodeFunctions": [
        {
            "code": 401,
            "msgTitle": "9Anime's Challenge Detected",
            "msgBody": "Please wait until the website loads, then close it using the 'Done' button.",
            "type": "normal",
            "functions": [
                {
                    "request": {
                        "url": "https://9anime.to",
                        "method": "get",
                        "headers": [
                            {
                                "key": "",
                                "value": ""
                            }
                        ],
                        "httpBody": null
                    },
                    "extra": {
                        "commands": [
                            {
                                "commandName": "",
                                "params": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ]
                            }
                        ],
                        "extraInfo": [
                            {
                                "key": "",
                                "value": ""
                            }
                        ]
                    },
                    "javascriptConfig": {
                        "removeJavascript": false,
                        "loadInWebView": true,
                        "javaScript": "function sleep(ms) { var start = new Date().getTime(), expire = start + ms; while (new Date().getTime() < expire) { } return;}sleep(3000);"
                    }
                }
            ]
        }
    ],
    "helperFunctions": [
        {
            "functionName": "example",
            "msgTitle": "Help",
            "msgBody": "Please wait till the EPISODES load on the site and then click done.",
            "type": "captcha",
            "functions": [
                {
                    "request": {
                        "url": "empty",
                        "method": "get",
                        "headers": [
                            {
                                "key": "key",
                                "value": "value"
                            }
                        ],
                        "httpBody": null
                    },
                    "extra": {
                        "commands": [
                            {
                                "commandName": "",
                                "params": [
                                    {
                                        "key": "",
                                        "value": ""
                                    }
                                ]
                            }
                        ],
                        "extraInfo": [
                            {
                                "key": "",
                                "value": ""
                            }
                        ]
                    },
                    "javascriptConfig": {
                        "removeJavascript": true,
                        "loadInWebView": false,
                        "javaScript": "function Info(request, extra, javascriptConfig) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}const savedData = document.getElementById('ketsu-final-data');const parsedJson = JSON.parse(savedData.innerHTML);let emptyKeyValue = [new KeyValue('', '')];const eps = document.querySelector('#episodes').innerHTML;const data = encodeURIComponent(eps.replace(/\\r?\\n|\\r/g, ''));const commands = [ new Commands('variable', [ new KeyValue('data', data), new KeyValue('current', parsedJson.request.url) ])];const infoPageObject = new Info(new ModuleRequest('', '', emptyKeyValue, null), new Extra(commands, emptyKeyValue), new JavascriptConfig(false, false, ''));const finalJson = JSON.stringify(infoPageObject);savedData.innerHTML = finalJson;"
                    }
                }
            ]
        }
    ]
}

